from m5stack import *
from m5ui import *
from uiflow import *
import imu
import time
import math
from math import atan, atan2, sqrt
from math import degrees as rad2deg



  
class KalmanCalculator():
    MEASUREMENT_INTERVAL = 0.05  # Accelerometer measurement interval

    def __init__(self, name, mpu: 'MPU6050'):
        # threading.Thread.__init__(self, name=name, daemon=)
        super().__init__(name=name, daemon=True)
        self.name = name
        self.mpu = mpu

        self._kalman_x = KalmanAngle()
        self._kalman_y = KalmanAngle()

        self._roll = 0  # Variable which holds the processed roll (x angle)
        self._pitch = 0  # variable which holds the processed pitch (y angle)
        self._kal_angle_x = 0
        self._kal_angle_y = 0
        self._compl_angle_x = 0
        self._compl_angle_y = 0
        self._gyro_angle_x = 0
        self._gyro_angle_y = 0

        self._timer = 0

        # lock for thread-safe access to roll and pitch
        # self._read_lock = threading.Lock()
        self.interrupted = False  # Flag to interrupt the thread

    def get_roll(self) -> float:
        """Get the roll (x angle)"""
        with self._read_lock:
            return self._roll

    def get_pitch(self) -> float:
        """Get the pitch (y angle)"""
        with self._read_lock:
            return self._pitch

    def get_angle_x(self) -> float:
        """Get the x angle (roll)"""
        return self.get_roll()

    def get_angle_y(self) -> float:
        """Get the y angle (pitch)"""
        return self.get_pitch()

    def get_angles(self) -> tuple:
        """Get a tuple of angles"""
        return self.get_roll(), self.get_pitch()

    def measure_angle(self) -> tuple:
        """Measure at what angle the accelerometer currently is using the information of previous measurements."""
        # Read Accelerometer raw value
        acc_data = self.mpu.get_accel_data()
        acc_x = acc_data['x']
        acc_y = acc_data['y']
        acc_z = acc_data['z']

        # Read Gyroscope raw value
        gyro_data = self.mpu.get_gyro_data()
        gyro_x = gyro_data['x']
        gyro_y = gyro_data['y']
        gyro_z = gyro_data['z']  # Not used

        dt = time.time() - self._timer
        self._timer = time.time()

        roll = rad2deg(atan2(acc_y, acc_z))
        pitch = rad2deg(atan(-acc_x / sqrt((acc_y ** 2) + (acc_z ** 2))))

        gyro_rate_x = gyro_x / self.mpu.get_gyro_scale_modifier()  # Scale the gyroscope
        gyro_rate_y = gyro_y / self.mpu.get_gyro_scale_modifier()  # Scale the gyroscope

        if (roll < -90 and self._kal_angle_x > 90) or (roll > 90 and self._kal_angle_x < -90):
            self._kalman_x.setAngle(roll)
            self._compl_angle_x = roll
            self._kal_angle_x = roll
            self._gyro_angle_x = roll
        else:
            self._kal_angle_x = self._kalman_x.getAngle(roll, gyro_rate_x, dt)

        if abs(self._kal_angle_y) > 90:  # If the pitch is bigger than 90 degrees, invert it
            gyro_rate_y = -gyro_rate_y
            self._kal_angle_y = self._kalman_y.getAngle(pitch, gyro_rate_y, dt)

        # angle = (rate of change of angle) * change in time
        self._gyro_angle_x = gyro_rate_x * dt
        self._gyro_angle_y = gyro_rate_y * dt

        # compAngle = constant * (old_compAngle + angle_obtained_from_gyro) + constant * angle_obtained from accelerometer
        self._compl_angle_x = 0.93 * \
            (self._compl_angle_x + gyro_rate_x * dt) + 0.07 * roll
        self._compl_angle_y = 0.93 * \
            (self._compl_angle_y + gyro_rate_y * dt) + 0.07 * pitch

        # Adjust angles to range (-180, 180)
        if (self._gyro_angle_x < -180) or (self._gyro_angle_x > 180):
            self._gyro_angle_x = self._kal_angle_x
        if (self._gyro_angle_y < -180) or (self._gyro_angle_y > 180):
            self._gyro_angle_y = self._kal_angle_y

        with self._read_lock:
            self._pitch = self._compl_angle_y
            self._roll = self._compl_angle_x
            return self._roll, self._pitch  # Return the x and y angles

    def run(self):
        """Overridden method of the Thread class. Run the thread using .start()"""
        self.measure_until_interrupted()

    def measure_until_interrupted(self, interval=None, log_output=False):
        """
        Continuously measure the angle recorded by the accelerometer. This will only be stopped once self.interrupt is
        set to True.

        :param interval: Time in between measurements. Defaults to MEASUREMENT_INTERVAL
        :param log_output: Whether the output should be logged (it is recommended to set a higher interval when using
        this feature). Defaults to False.
        """
        if interval is None:
            interval = self.MEASUREMENT_INTERVAL

        acc_data = self.mpu.get_accel_data()
        acc_x = acc_data['x']
        acc_y = acc_data['y']
        acc_z = acc_data['z']

        angle_x = rad2deg(atan2(acc_y, acc_z))
        angle_y = rad2deg(atan(-acc_x / sqrt((acc_y ** 2) + (acc_z ** 2))))

        self._kalman_x.setAngle(angle_x)
        self._kalman_y.setAngle(angle_y)
        self._gyro_angle_x = angle_x
        self._gyro_angle_y = angle_y
        self._compl_angle_x = angle_x
        self._compl_angle_y = angle_y

        self._timer = time.time()

        while self.interrupted is False:  # Measure forever until the self.interrupted flag is set to True
            roll, pitch = self.measure_angle()
            if log_output is True:
                print('roll (x): %0.1f, pitch (y): %0.1f' % (roll, pitch))
            time.sleep(interval)

    


class KalmanAngle:

    def __init__(self):
        self.QAngle = 0.001
        self.QBias = 0.003
        self.RMeasure = 0.03
        self.angle = 0.0
        self.bias = 0.0
        self.rate = 0.0
        self.P = [[0.0, 0.0], [0.0, 0.0]]

    def getAngle(self, newAngle, newRate, dt):
        # step 1:
        self.rate = newRate - self.bias  # new_rate is the latest Gyro measurement
        self.angle += dt * self.rate

        # Step 2:
        self.P[0][0] += dt * (dt * self.P[1][1] - self.P[0]
                              [1] - self.P[1][0] + self.QAngle)
        self.P[0][1] -= dt * self.P[1][1]
        self.P[1][0] -= dt * self.P[1][1]
        self.P[1][1] += self.QBias * dt

        # Step 3: Innovation
        y = newAngle - self.angle

        # Step 4: Innovation covariance
        s = self.P[0][0] + self.RMeasure

        # Step 5:    Kalman Gain
        K = [0.0, 0.0]
        K[0] = self.P[0][0] / s
        K[1] = self.P[1][0] / s

        # Step 6: Update the Angle
        self.angle += K[0] * y
        self.bias += K[1] * y

        # Step 7: Calculate estimation error covariance - Update the error covariance
        P00Temp = self.P[0][0]
        P01Temp = self.P[0][1]

        self.P[0][0] -= K[0] * P00Temp
        self.P[0][1] -= K[0] * P01Temp
        self.P[1][0] -= K[1] * P00Temp
        self.P[1][1] -= K[1] * P01Temp

        return self.angle

    def setAngle(self, angle):
        self.angle = angle

    def setQAngle(self, QAngle):
        self.QAngle = QAngle

    def setQBias(self, QBias):
        self.QBias = QBias

    def setRMeasure(self, RMeasure):
        self.RMeasure = RMeasure

    def getRate(self):
        return self.rate

    def getQAngle(self):
        return self.QAngle

    def getQBias(self):
        return self.QBias

    def getRMeasure(self):
        return self.RMeasure


last_read_time = 0.0   
# These are the filtered angles
last_x_angle = 0.0          
last_y_angle = 0.0
last_z_angle = 0.0


def acc_angle(Ax, Ay, Az):
    radToDeg = 180/3.14159
    ax_angle = math.atan(Ay/math.sqrt(math.pow(Ax,2) + math.pow(Az, 2)))*radToDeg
    ay_angle = math.atan((-1*Ax)/math.sqrt(math.pow(Ay,2) + math.pow(Az, 2)))*radToDeg
    return (ax_angle, ay_angle)

def gyr_angle(Gx, Gy, Gz, dt):
    gx_angle = Gx*dt + get_last_x_angle()
    gy_angle = Gy*dt + get_last_y_angle()
    gz_angle = Gz*dt + get_last_z_angle()
    return (gx_angle, gy_angle, gz_angle)

  # A complementary filter to determine the change in angle by combining accelerometer and gyro values. Alpha depends on the sampling rate...
def c_filtered_angle(ax_angle, ay_angle, gx_angle, gy_angle):
    alpha = 0.90
    c_angle_x = alpha*gx_angle + (1.0 - alpha)*ax_angle
    c_angle_y = alpha*gy_angle + (1.0 - alpha)*ay_angle
    return (c_angle_x, c_angle_y)

 # Kalman filter to determine the change in angle by combining accelerometer and gyro values. 
def k_filtered_angle(ax_angle, ay_angle, Gx, Gy, dt):
    k_angle_x = kalmanX.getAngle(ax_angle, Gx, dt)
    k_angle_y = kalmanY.getAngle(ay_angle, Gy, dt)
    return (k_angle_x, k_angle_y)
    
def read_values_helper():

    #Read Accelerometer raw value
    acc_x = read_raw_data(ACCEL_XOUT_H)
    acc_y = read_raw_data(ACCEL_YOUT_H)
    acc_z = read_raw_data(ACCEL_ZOUT_H)
    
    #Read Gyroscope raw value
    gyro_x = read_raw_data(GYRO_XOUT_H)
    gyro_y = read_raw_data(GYRO_YOUT_H)
    gyro_z = read_raw_data(GYRO_ZOUT_H)

    #Read Temp raw value
    temp = read_raw_data(TEMP_OUT_H)

    return (acc_x, acc_y, acc_z, gyro_x, gyro_y, gyro_z)

def get_last_time(): 
    return last_read_time
def get_last_x_angle():
    return last_x_angle
def get_last_y_angle():
    return last_y_angle
def get_last_z_angle():
    return last_z_angle


kalmanX = KalmanAngle()
kalmanY = KalmanAngle()



setScreenColor(0x111111)


kalman_angle_y = None

imu0 = imu.IMU()


label0 = M5TextBox(47, 27, "label0", lcd.FONT_Default, 0xFFFFFF, rotate=0)
label1 = M5TextBox(47, 56, "label1", lcd.FONT_Default, 0xFFFFFF, rotate=0)
label2 = M5TextBox(47, 82, "label2", lcd.FONT_Default, 0xFFFFFF, rotate=0)
label3 = M5TextBox(47, 110, "label3", lcd.FONT_Default, 0xFFFFFF, rotate=0)





calib_x_accel = 0.0 
calib_y_accel = 0.0 
calib_z_accel = 0.0 
calib_x_gyro  = 0.0 
calib_y_gyro  = 0.0 
calib_z_gyro  = 0.0 

uart1 = machine.UART(1, tx=32, rx=33)
uart1.init(115200, bits=8, parity=None, stop=1)
while True:

  t_now = time.ticks_ms()
  dt = (t_now - get_last_time())/1000.0

  #accerelometer x y z axis 
  Ax = imu0.acceleration[0]/16384.0
  Ay = imu0.acceleration[1]/16384.0
  Az = imu0.acceleration[2]/16384.0
  
  Gx = (imu0.gyro[0] - calib_x_gyro)/131.0
  Gy = (imu0.gyro[1] - calib_y_gyro)/131.0
  Gz = (imu0.gyro[2] - calib_z_gyro)/131.0
  
  acc_angles = acc_angle(Ax, Ay, Az) # Calculate angle of inclination or tilt for the x and y axes with acquired acceleration vectors
  gyr_angles = gyr_angle(Gx, Gy, Gz, dt) # Calculate angle of inclination or tilt for x,y and z axes with angular rates and dt 
  (c_angle_x, c_angle_y) = c_filtered_angle(acc_angles[0], acc_angles[1], gyr_angles[0], gyr_angles[1]) # filtered tilt angle i.e. what we're after
  (k_angle_x, k_angle_y) = k_filtered_angle(acc_angles[0], acc_angles[1], Gx, Gy, dt)
  
  print((str('cx angle') + str((c_angle_x))))
  print((str('cy angle') + str((c_angle_y))))
  print((str('kx angle') + str((k_angle_x))))
  print((str('ky angle') + str((k_angle_y))))
  
  label0.setText(str('cx') + str((c_angle_x)))
  label1.setText(str('cy') + str((c_angle_y)))
  label2.setText(str('kx') + str((k_angle_x)))
  label3.setText(str('ky') + str((k_angle_y)))
  uart1.write(str(k_angle_y))

  if uart1.any():
    kalman_angle_y = (uart1.readline()).decode()
    print(kalman_angle_y)
  wait(1)
  wait_ms(2)

    
   
